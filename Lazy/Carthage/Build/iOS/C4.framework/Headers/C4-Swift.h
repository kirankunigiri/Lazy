// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import AVFoundation;
@import CoreText;
@import QuartzCore;
@import CoreImage;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIView;
@class CALayer;
@class UIPinchGestureRecognizer;
@class UIRotationGestureRecognizer;


/// The C4View class defines a rectangular area on the screen and the interfaces for managing visual content in that area. The C4View class itself provides basic behavior for filling its rectangular area with a background color. More sophisticated content can be presented by subclassing UIView and implementing the necessary drawing and event-handling code yourself. The C4 framework also includes a set of standard subclasses that range from simple shapes to movies and images that can be used as-is.
SWIFT_CLASS("_TtC2C46C4View")
@interface C4View : NSObject

/// A UIView. Internally, C4View wraps and provides access to an internal UIView.
@property (nonatomic, strong) UIView * __nonnull view;

/// Initializes a C4View.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Initializes a new C4View from a UIView.
///
/// \param view A UIView.
- (nonnull instancetype)initWithView:(UIView * __nonnull)view OBJC_DESIGNATED_INITIALIZER;

/// Returns the receiver's layer.
@property (nonatomic, readonly, strong) CALayer * __nullable layer;

/// Returns the receiver's frame width. Animatable.
@property (nonatomic, readonly) double width;

/// Returns the receiver's frame height. Animatable.
@property (nonatomic, readonly) double height;

/// Returns the receiver's opacity. Animatable.
@property (nonatomic) double opacity;

/// Returns true if the receiver is hidden, false if visible.
@property (nonatomic) BOOL hidden;

/// The layer’s position on the z axis. Animatable.
///
/// The default value of this property is 0. Changing the value of this property changes the the front-to-back ordering of layers onscreen. This can affect the visibility of layers whose frame rectangles overlap.
/// The value of this property is measured in points.
@property (nonatomic) double zPosition;

/// An optional view whose alpha channel is used to mask the receiver's content.
///
/// The mask view's alpha channel determines how much of the receiver's content and background shows through. Fully or partially opaque pixels allow the underlying content to show through but fully transparent pixels block that content.
/// The default value of this property is nil. When configuring a mask, remember to set the size and position of the mask layer to ensure it is aligned properly with the layer it masks.
/// The layer you assign to this property must not have a superlayer. If it does, the behavior is undefined.
@property (nonatomic, strong) C4View * __nullable mask;

/// Returns true if the receiver accepts touch events.
@property (nonatomic) BOOL interactionEnabled;

/// Adds a pinch gesture recognizer to the receiver's view.
///
/// <code>let f = C4Rect(0,0,100,100)
/// let v = C4View(frame: f)
/// v.addPinchGestureRecognizer { scale, velocity, state in
///     println("pinched")
/// }
/// 
/// - parameter action: A block of code to be executed when the receiver recognizes a pinch gesture.
/// 
/// - returns: A UIPinchGestureRecognizer that can be customized.
/// 
/// </code>
- (UIPinchGestureRecognizer * __nonnull)addPinchGestureRecognizer:(void (^ __nonnull)(double, double, UIGestureRecognizerState))action;

/// Adds a rotation gesture recognizer to the receiver's view.
///
/// <code>let f = C4Rect(0,0,100,100)
/// let v = C4View(frame: f)
/// v.addRotationGestureRecognizer { rotation, velocity, state in
///     println("rotated")
/// }
/// 
/// </code>
/// \param action A block of code to be executed when the receiver recognizes a rotation gesture.
///
/// \returns  A UIRotationGestureRecognizer that can be customized.
- (UIRotationGestureRecognizer * __nonnull)addRotationGestureRecognizer:(void (^ __nonnull)(double, double, UIGestureRecognizerState))action;

/// Unlinks the view from its superview and its window, and removes it from the responder chain.
///
/// If the view’s superview is not nil, the superview releases the view.
///
/// Calling this method removes any constraints that refer to the view you are removing, or that refer to any view in the
/// subtree of the view you are removing.
///
/// <code>let v = C4View(frame: C4Rect(0,0,100,100))
/// let subv = C4View(frame: C4Rect(25,25,50,50))
/// v.add(subv)
/// subv.removeFromSuperview()
/// 
/// </code>
- (void)removeFromSuperview;
@end

@class C4ShapeLayer;
@class NSNumber;


/// C4Shape is a concrete subclass of C4View that draws a bezier path in its coordinate space.
SWIFT_CLASS("_TtC2C47C4Shape")
@interface C4Shape : C4View

/// C4Shape's contents are drawn on a C4ShapeLayer.
@property (nonatomic, readonly, strong) C4ShapeLayer * __nonnull shapeLayer;

/// The line width used when stroking the path. Defaults to 1.0. Animatable.
@property (nonatomic) double lineWidth;

/// This value defines the start of the path used to draw the stroked outline. The value must be in the range [0,1] with zero representing the start of the path and one the end. Values in between zero and one are interpolated linearly along the path length. Defaults to zero. Animatable.
@property (nonatomic) double strokeStart;

/// This value defines the end of the path used to draw the stroked outline. The value must be in the range [0,1] with zero representing the start of the path and one the end. Values in between zero and one are interpolated linearly along the path length. Defaults to 1.0. Animatable.
@property (nonatomic) double strokeEnd;

/// The miter limit used when stroking the path. Defaults to ten. Animatable.
@property (nonatomic) double miterLimit;

/// The phase of the dashing pattern applied when creating the stroke. Defaults to zero. Animatable.
@property (nonatomic) double lineDashPhase;

/// The dash pattern applied when creating the stroked version of the path. Defaults to nil.
@property (nonatomic, copy) NSArray<NSNumber *> * __nullable lineDashPattern;

/// The size of the receiver including the width of its stroke.
- (CGSize)intrinsicContentSize;

/// Returns true if there is no path.
- (BOOL)isEmpty;
@end



/// C4Arc is a concrete subclass of C4Shape that has a special initialzer that creates an arc whose shape is defined by rotating around a specified point.
SWIFT_CLASS("_TtC2C45C4Arc")
@interface C4Arc : C4Shape
@end



/// C4AudioPlayer provides playback of audio data from a file or memory.
///
/// Using an audio player you can:
///
/// Play sounds of any duration
///
/// Play sounds from files or memory buffers
///
/// Loop sounds
///
/// Play multiple sounds simultaneously, one sound per audio player, with precise synchronization
///
/// Control relative playback level, stereo positioning, and playback rate for each sound you are playing
///
/// Seek to a particular point in a sound file, which supports such application features as fast forward and rewind
///
/// Obtain data you can use for playback-level metering
SWIFT_CLASS("_TtC2C413C4AudioPlayer")
@interface C4AudioPlayer : NSObject <AVAudioPlayerDelegate>

/// Initializes a new audio player from a given file name
///
/// <code>let ap = C4AudioPlayer("audioTrackFileName")
/// 
/// </code>
- (nullable instancetype)init:(NSString * __nonnull)name OBJC_DESIGNATED_INITIALIZER;

/// Plays a sound asynchronously.
- (void)play;

/// Pauses playback; sound remains ready to resume playback from where it left off. Calling pause leaves the audio player prepared to play; it does not release the audio hardware that was acquired upon calling play or prepareToPlay.
- (void)pause;

/// Stops playback and undoes the setup needed for playback. Calling this method, or allowing a sound to finish playing, undoes the setup performed upon calling the play or prepareToPlay methods. The stop method does not reset the value of the currentTime property to 0. In other words, if you call stop during playback and then call play, playback resumes at the point where it left off.
- (void)stop;

/// Returns the total duration, in seconds, of the sound associated with the audio player. (read-only)
@property (nonatomic, readonly) double duration;

/// Returns true if the receiver's current playback rate > 0. Otherwise returns false.
@property (nonatomic, readonly) BOOL playing;

/// The audio player’s stereo pan position. By setting this property you can position a sound in the stereo field. A value of –1.0 is full left, 0.0 is center, and 1.0 is full right.
@property (nonatomic) double pan;

/// The playback volume for the audio player, ranging from 0.0 through 1.0 on a linear scale. A value of 0.0 indicates silence; a value of 1.0 (the default) indicates full volume for the audio player instance. Use this property to control an audio player’s volume relative to other audio output. To provide UI in iOS for adjusting system audio playback volume, use the MPVolumeView class, which provides media playback controls that users expect and whose appearance you can customize.
@property (nonatomic) double volume;

/// The playback point, in seconds, within the timeline of the sound associated with the audio player. If the sound is playing, currentTime is the offset of the current playback position, measured in seconds from the start of the sound. If the sound is not playing, currentTime is the offset of where playing starts upon calling the play method, measured in seconds from the start of the sound. By setting this property you can seek to a specific point in a sound file or implement audio fast-forward and rewind functions.
@property (nonatomic) double currentTime;

/// The audio player’s playback rate. This property’s default value of 1.0 provides normal playback rate. The available range is from 0.5 for half-speed playback through 2.0 for double-speed playback. To set an audio player’s playback rate, you must first enable rate adjustment as described in the enableRate property description.
///
/// <code>let ap = C4AudioPlayer("audioTrackFileName")
/// ap.enableRate = true
/// ap.rate = 0.5
/// ap.play()
/// 
/// </code>
@property (nonatomic) double rate;

/// The number of times a sound will return to the beginning, upon reaching the end, to repeat playback. A value of 0, which is the default, means to play the sound once. Set a positive integer value to specify the number of times to return to the start and play again. For example, specifying a value of 1 results in a total of two plays of the sound. Set any negative integer value to loop the sound indefinitely until you call the stop method.
///
/// Defaults to 1000000.
@property (nonatomic) BOOL loops;

/// A Boolean value that specifies the audio-level metering on/off state for the audio player. The default value for the meteringEnabled property is off (Boolean false). Before using metering for an audio player, you need to enable it by setting this property to true. If player is an audio player instance variable of your controller class, you enable metering as shown here:
///
/// <code>let ap = C4AudioPlayer("audioTrackFileName")
/// ap.meteringEnabled = true
/// 
/// </code>
@property (nonatomic) BOOL meteringEnabled;

/// A Boolean value that specifies whether playback rate adjustment is enabled for an audio player. To enable adjustable playback rate for an audio player, set this property to true after you initialize the player and before you call the prepareToPlay instance method for the player.
@property (nonatomic) BOOL enableRate;

/// Refreshes the average and peak power values for all channels of an audio player. To obtain current audio power values, you must call this method before calling averagePowerForChannel: or peakPowerForChannel:.
///
/// <code>let t = NSTimer.scheduledTimerWithTimeInterval(1.0/60.0,
///                                        target: self,
///                                      selector: "update",
///                                      userInfo: nil,
///                                       repeats: true)
/// 
/// let ap = C4AudioPlayer("audioTrackFileName")
/// ap.meteringEnabled = true
/// 
/// func update() {
///     ap.updateMeters()
/// }
/// 
/// </code>
- (void)updateMeters;

/// Returns the average power for a given channel, in decibels, for the sound being played.
///
/// <code>func update() {
///     let av = player.averagePower(channel: 0)
/// }
/// 
/// </code>
/// \param channelNumber The audio channel whose average power value you want to obtain.
///
/// \returns  A floating-point representation, in decibels, of a given audio channel’s current average power.
- (double)averagePower:(NSInteger)channel;

/// Returns the peak power for a given channel, in decibels, for the sound being played.
///
/// <code>func update() {
///     let pk = player.peakPower(channel: 0)
/// }
/// - parameter channelNumber: The audio channel whose peak power value you want to obtain.
/// 
/// - returns: A floating-point representation, in decibels, of a given audio channel’s current peak power.
/// 
/// </code>
- (double)peakPower:(NSInteger)channel;
@end

@class NSBundle;
@class NSCoder;


/// The C4CanvasController class provides the infrastructure for managing the views of your iOS apps. A canvas controller manages a set of views that make up a portion of your app’s user interface. It is responsible for loading and disposing of those views, for managing interactions with those views, and for coordinating responses with any appropriate data objects. Canvas controllers also coordinate their efforts with other controller objects—including other view controllers—and help manage your app’s overall interface.
SWIFT_CLASS("_TtC2C418C4CanvasController")
@interface C4CanvasController : UIViewController

/// Called after the controller's view is loaded into memory.
///
/// This override disables implicit CALayer animations, calls <code>setup()
/// </code> and then re-enables animations.
///
/// You should <em>not</em> override this method, instead use <em>setup()</em>.
- (void)viewDidLoad;

/// Called during the controller's viewDidLoad() method.
///
/// This method should be used to set up any objects or behaviours necessary when the controller's view loads.
- (void)setup;

/// Overrides default behaviour of showing the app's status bar. Defaults to true
///
/// \returns  a boolean value representing whether or not the app should hide its status bar
- (BOOL)prefersStatusBarHidden;
- (nonnull instancetype)initWithNibName:(NSString * __nullable)nibNameOrNil bundle:(NSBundle * __nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// C4Ellipse is a concrete subclass of C4Shape that has a special initialzer that creates an ellipse whose shape is defined by the object's frame.
SWIFT_CLASS("_TtC2C49C4Ellipse")
@interface C4Ellipse : C4Shape
@end



/// C4Circle is a concrete subclass of C4Ellipse that has a special initialzer that creates a uniform ellipse.
SWIFT_CLASS("_TtC2C48C4Circle")
@interface C4Circle : C4Ellipse
@end



/// C4Curve is a concrete subclass of C4Shape that has a special initialzer that creates an bezier whose shape is defined by its end points and two control points.
SWIFT_CLASS("_TtC2C47C4Curve")
@interface C4Curve : C4Shape
@end


@class UIFont;


/// C4Font objects represent fonts to an application, providing access to characteristics of the font and assistance in laying out glyphs relative to one another.
SWIFT_CLASS("_TtC2C46C4Font")
@interface C4Font : NSObject

/// The UIFont representation of the receiver.
///
/// <code>let uif = font.UIFont
/// 
/// </code>
@property (nonatomic, readonly, strong) UIFont * __nonnull uiifont;

/// Initializes a new C4Font using the specified font name and size.
///
/// <code>let f = C4Font("Helvetica", 20)
/// 
/// </code>
- (nullable instancetype)initWithName:(NSString * __nonnull)name size:(double)size OBJC_DESIGNATED_INITIALIZER;

/// Initializes a new C4Font using the specified font name and default size of 12.0 pt.
///
/// <code>let f = C4Font("Helvetica")
/// 
/// </code>
- (nullable instancetype)initWithName:(NSString * __nonnull)name;

/// Initializes a new C4Font using a specified UIFont.
///
/// <code>if let uif = UIFont(name: "Helvetica", size: 24) {
///     let f = C4Font(font: uif)
/// }
/// 
/// </code>
- (nonnull instancetype)initWithFont:(UIFont * __nonnull)font OBJC_DESIGNATED_INITIALIZER;

/// Returns an array of font family names available on the system.
///
/// \returns  An array of String objects, each of which contains the name of a font family.
+ (NSArray * __nonnull)familyNames;

/// Returns an array of font names available in a particular font family.
///
/// <code>for n in C4Font.fontNames("Avenir Next") {
///     println(n)
/// }
/// 
/// </code>
/// \param familyName The name of the font family.
///
/// \returns  An array of String objects, each of which contains a font name associated with the specified family.
+ (NSArray * __nonnull)fontNames:(NSString * __nonnull)familyName;

/// Returns the font object used for standard interface items in the specified size.
///
/// <code>let f = C4Font.systemFont(20)
/// 
/// </code>
/// \param fontSize The size (in points) to which the font is scaled.
///
/// \returns  A font object of the specified size.
+ (C4Font * __nonnull)systemFont:(double)size;

/// Returns the font object used for standard interface items that are rendered in boldface type in the specified size.
///
/// <code>let f = C4Font.boldSystemFont(20)
/// 
/// </code>
/// \param fontSize The size (in points) to which the font is scaled.
///
/// \returns  A font object of the specified size.
+ (C4Font * __nonnull)boldSystemFont:(double)size;

/// Returns the font object used for standard interface items that are rendered in italic type in the specified size.
///
/// <code>let f = C4Font.italicSystemFont(20)
/// 
/// </code>
/// \param fontSize The size (in points) to which the font is scaled.
///
/// \returns  A font object of the specified size.
+ (C4Font * __nonnull)italicSystemFont:(double)size;

/// Returns a font object that is the same as the receiver but which has the specified size instead.
///
/// <code>let f = C4Font(name: "Avenir Next")
/// let f2 = f.font(20)
/// 
/// </code>
/// \param fontSize The desired size (in points) of the new font object.
///
/// \returns  A font object of the specified size.
- (C4Font * __nonnull)font:(double)size;

/// The font family name. (read-only) A family name is a name such as Times New Roman that identifies one or more specific fonts. The value in this property is intended for an application’s internal usage only and should not be displayed.
@property (nonatomic, readonly, copy) NSString * __nonnull familyName;

/// The font face name. (read-only) The font name is a name such as HelveticaBold that incorporates the family name and any specific style information for the font. The value in this property is intended for an application’s internal usage only and should not be displayed.
///
/// <code>let f = C4Font(name: "Avenir Next")
/// let n = f.fontName
/// 
/// </code>
@property (nonatomic, readonly, copy) NSString * __nonnull fontName;

/// The receiver’s point size, or the effective vertical point size for a font with a nonstandard matrix. (read-only) Defaults to 12.0
@property (nonatomic, readonly) double pointSize;

/// The top y-coordinate, offset from the baseline, of the receiver’s longest ascender. (read-only) The ascender value is measured in points.
@property (nonatomic, readonly) double ascender;

/// The bottom y-coordinate, offset from the baseline, of the receiver’s longest descender. (read-only) The descender value is measured in points. This value may be positive or negative. For example, if the longest descender extends 2 points below the baseline, this method returns -2.0 .
@property (nonatomic, readonly) double descender;

/// The receiver’s cap height information. (read-only) This value measures (in points) the height of a capital character.
@property (nonatomic, readonly) double capHeight;

/// The x-height of the receiver. (read-only) This value measures (in points) the height of the lowercase character "x".
@property (nonatomic, readonly) double xHeight;

/// The height of text lines (measured in points). (read-only)
@property (nonatomic, readonly) double lineHeight;

/// Returns the standard font size used for labels.
///
/// \returns  The standard label font size in points.
@property (nonatomic, readonly) double labelFontSize;

/// Returns the standard font size used for buttons.
///
/// \returns  The standard button font size in points.
@property (nonatomic, readonly) double buttonFontSize;

/// Returns the size of the standard system font.
///
/// \returns  The standard system font size in points.
@property (nonatomic, readonly) double systemFontSize;

/// Returns the size of the standard small system font.
///
/// \returns  The standard small system font size in points.
@property (nonatomic, readonly) double smallSystemFontSize;

/// Returns a CGFontRef version of the receiver.
@property (nonatomic, readonly) CGFontRef __nullable CGFont;

/// Returns a CTFontRef version of the receiver.
@property (nonatomic, readonly) CTFontRef __nonnull CTFont;
@end

@class C4GradientLayer;


/// The C4Gradient class draws a color gradient over its background color, filling the shape of the view (including rounded corners).
SWIFT_CLASS("_TtC2C410C4Gradient")
@interface C4Gradient : C4View

/// The background layer of the receiver.
@property (nonatomic, readonly, strong) C4GradientLayer * __nonnull gradientLayer;

/// An optional array of Double values defining the location of each gradient stop. Animatable.
///
/// Defaults to [0,1]
@property (nonatomic, copy) NSArray<NSNumber *> * __nonnull locations;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithView:(UIView * __nonnull)view OBJC_DESIGNATED_INITIALIZER;
@end

@protocol CAAction;


/// The C4GradientLayer class draws a color gradient over its background color, filling the shape of the layer (including rounded corners)
SWIFT_CLASS("_TtC2C415C4GradientLayer")
@interface C4GradientLayer : CAGradientLayer

/// A boolean value that, when true, prevents the animation of a shape's properties.
///
/// This value can be set globally, after which changes to any shape's properties will be immediate.
+ (BOOL)disableActions;
+ (void)setDisableActions:(BOOL)value;

/// This method searches for the given action object of the layer. Actions define dynamic behaviors for a layer. For example, the animatable properties of a layer typically have corresponding action objects to initiate the actual animations. When that property changes, the layer looks for the action object associated with the property name and executes it. You can also associate custom action objects with your layer to implement app-specific actions.
///
/// \param key The identifier of the action.
///
/// \returns  the action object assigned to the specified key.
- (id <CAAction> __nullable)actionForKey:(NSString * __nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id __nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
@class CIImage;
@class NSData;
@class NSURL;


/// A C4Image provides a view-based container for displaying a single image. You can create images from files, from other image objects, or from raw image data you receive.
SWIFT_CLASS("_TtC2C47C4Image")
@interface C4Image : C4View

/// Initializes a new C4Image using the specified filename from the bundle (i.e. your project), it will also grab images from the web if the filename starts with http.
///
/// <code>let img = C4Image("logo")
/// canvas.add(img)
/// 
/// </code>
/// \param name The name of the image included in your project, or a web address.
- (nullable instancetype)init:(NSString * __nonnull)name;

/// Initializes a new C4Image using the specified filename from the bundle (i.e. your project), it will also grab images from the web if the filename starts with http.
///
/// <code>let img = C4Image("http://www.c4ios.com/images/logo@2x.png", scale: 2.0)
/// canvas.add(img)
/// 
/// </code>
/// \param name The name of the image included in your project, or a web address.
- (nullable instancetype)init:(NSString * __nonnull)name scale:(double)scale;

/// Initializes a new C4Image using an existing C4Image (basically like copying).
///
/// <code>let a = C4Image("logo")
/// canvas.add(a)
/// let b = C4Image(image: a)
/// b.center = canvas.center
/// canvas.add(b)
/// 
/// </code>
/// \param image A C4Image.
- (nonnull instancetype)initWithImage:(C4Image * __nonnull)image;

/// Initializes a new C4Image using a UIImage.
///
/// <code>if let uii = UIImage(named:"logo") {
///     let img = C4Image(uiimage: uii)
///     canvas.add(img)
/// }
/// 
/// </code>
/// \param uiimage A UIImage object.
- (nonnull instancetype)initWithUiimage:(UIImage * __nonnull)uiimage;

/// Initializes a new C4Image using a UIImage, with option for specifying the scale of the image.
///
/// <code>if let uii = UIImage(named:"logo") {
///     let img = C4Image(uiimage: uii, scale: 2.0)
///     canvas.add(img)
/// }
/// 
/// </code>
/// \param uiimage A UIImage object.
///
/// \param scale A <code>Double
/// </code> should be larger than 0.0
- (nonnull instancetype)initWithUiimage:(UIImage * __nonnull)uiimage scale:(double)scale;

/// Initializes a new C4Image using a CGImageRef.
///
/// <code>let cgi = CGImageCreate()
/// let img = C4Image(cgimage: cgi)
/// canvas.add(img)
/// 
/// </code>
/// <a href="https://gist.github.com/C4Framework/06319d420426cb0f1cb3">Example</a>
///
/// \param cgimage A CGImageRef object.
- (nonnull instancetype)initWithCgimage:(CGImageRef __nonnull)cgimage;

/// Initializes a new C4Image using a CGImageRef, with option for specifying the scale of the image.
///
/// <code>let cgi = CGImageCreate()
/// let img = C4Image(cgimage: cgi, scale: 2.0)
/// canvas.add(img)
/// 
/// </code>
/// \param uiimage A CGImageRef object.
- (nonnull instancetype)initWithCgimage:(CGImageRef __nonnull)cgimage scale:(double)scale;

/// Initializes a new C4Image using a CIImage.
///
/// Use this method if you're working with the output of a CIFilter.
///
/// \param ciimage A CIImage object.
- (nonnull instancetype)initWithCiimage:(CIImage * __nonnull)ciimage;

/// Initializes a new C4Image using a CIImage, with option for specifying the scale of the image.
///
/// Use this method if you're working with the output of a CIFilter.
///
/// \param uiimage A CIImage object.
- (nonnull instancetype)initWithCiimage:(CIImage * __nonnull)ciimage scale:(double)scale;

/// Initializes a new C4Image using raw data.
///
/// Use this if you download an image as data you can pass it here to create an image.
///
/// See the body of init(url:) to see how to download an image as data.
///
/// \param data An NSData object.
- (nonnull instancetype)initWithData:(NSData * __nonnull)data;

/// Initializes a new C4Image using raw data, with option for specifying the scale of the image.
///
/// Use this if you download an image as data you can pass it here to create an image.
///
/// See the body of init(url:) to see how to download an image as data.
///
/// \param data An NSData object.
- (nonnull instancetype)initWithData:(NSData * __nonnull)data scale:(double)scale;

/// Initializes a new C4Image from an URL.
///
/// <code> if let url = NSURL(string: "http://www.c4ios.com/images/logo@2x.png") {
///      let img = C4Image(url: url)
///      canvas.add(img)
/// }
/// 
/// </code>
/// \param url An NSURL object.
- (nonnull instancetype)initWithUrl:(NSURL * __nonnull)url;

/// Initializes a new C4Image from an URL, with option for specifying the scale of the image.
///
/// <code>if let url = NSURL(string: "http://www.c4ios.com/images/logo@2x.png") {
///     let img = C4Image(url: url, scale: 2.0)
///     canvas.add(img)
/// }
/// 
/// </code>
/// \param url An NSURL object.
- (nonnull instancetype)initWithUrl:(NSURL * __nonnull)url scale:(double)scale;

/// Returns a UIImage representation of the receiver.
///
/// \returns  A UIImage object.
@property (nonatomic, readonly, strong) UIImage * __nonnull uiimage;

/// Returns a CGImageRef representation of the receiver.
///
/// \returns  A CGImageRef object.
@property (nonatomic, readonly) CGImageRef __nonnull cgimage;

/// Returns a CIImage representation of the receiver. Generally, this would be used to work with filters.
///
/// \returns  A CIImage object.
@property (nonatomic, readonly, strong) CIImage * __nonnull ciimage;

/// An object that provides the contents of the layer. Animatable. The default value of this property is nil. If you are using the layer to display a static image, you can set this property to the CGImageRef containing the image you want to display. Assigning a value to this property causes the layer to use your image rather than create a separate backing store. If the layer object is tied to a view object, you should avoid setting the contents of this property directly. The interplay between views and layers usually results in the view replacing the contents of this property during a subsequent update.
@property (nonatomic) CGImageRef __nonnull contents;

/// A variable that provides access to the width of the receiver. Animatable. The default value of this property is defined by the image being created. Assigning a value to this property causes the receiver to change the width of its frame. If the receiver's contrainsProportions variable is set to true the receiver's height will change to match the new width.
@property (nonatomic) double width;

/// A variable that provides access to the height of the receiver. Animatable. The default value of this property is defined by the image being created. Assigning a value to this property causes the receiver to change the height of its frame. If the receiver's contrainsProportions variable is set to true the receiver's width will change to match the new width.
@property (nonatomic) double height;

/// Assigning a value of true to this property will cause the receiver to scale its entire frame whenever its width or height variables are set. The default value of this property is false.
@property (nonatomic) BOOL constrainsProportions;

/// The original width/height ratio of the receiver when it was initialized.
@property (nonatomic, readonly) double originalRatio;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithView:(UIView * __nonnull)view OBJC_DESIGNATED_INITIALIZER;
@end


@interface C4Image (SWIFT_EXTENSION(C4))
@end


@interface C4Image (SWIFT_EXTENSION(C4))
@end


@interface C4Image (SWIFT_EXTENSION(C4))
@end



/// C4Polygon is a concrete subclass of C4Shape that has a special initialzer that creates a non-uniform shape made up of 3 or more points.
SWIFT_CLASS("_TtC2C49C4Polygon")
@interface C4Polygon : C4Shape

/// Initializes a new C4Polygon from data in a given unarchiver.
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)coder OBJC_DESIGNATED_INITIALIZER;

/// Closes the shape.
///
/// This method appends a line between the shape's last point and its first point.
- (void)close;
@end



/// C4Line is a is a concrete subclass of C4Polygon that contains only two points.
///
/// This subclass overrides the <code>points
/// </code> variable so that it can only ever have 2 points, and also has an <code>endPoints
/// </code> variable that allows the user to edit either end of the line (animatable).
SWIFT_CLASS("_TtC2C46C4Line")
@interface C4Line : C4Polygon

/// Returns an object initialized from data in a given unarchiver.
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// This document describes the C4Movie class. You use a C4Movie object to implement the playback of video files, it encapulates an AVQueuePlayer object which handles the loading and control of assets.
///
/// The C4Movie class is meant to simplify the addition of videos to your application. It is also a subclass of C4View, and so has all the common animation, interaction and notification capabilities.
///
/// A C4Movie’s resizing behaviour is to map itself to the edges of its visible frame. This functionality implicitly uses AVLayerVideoGravityResize as its layer’s default gravity. You can change the frame of the movie from an arbitrary shape back to its original proportion by using its originalSize, originalRatio, or by independently setting either its width or height properties.
SWIFT_CLASS("_TtC2C47C4Movie")
@interface C4Movie : C4View

/// Assigning a value of true to this property will cause the receiver to loop at the end of playback.
///
/// The default value of this property is <code>true
/// </code>.
@property (nonatomic) BOOL loops;

/// A variable that provides access to the width of the receiver. Animatable. The default value of this property is defined by the movie being created. Assigning a value to this property causes the receiver to change the width of its frame. If the receiver's contrainsProportions variable is set to true the receiver's height will change to match the new width.
@property (nonatomic) double width;

/// A variable that provides access to the height of the receiver. Animatable. The default value of this property is defined by the movie being created. Assigning a value to this property causes the receiver to change the height of its frame. If the receiver's contrainsProportions variable is set to true the receiver's width will change to match the new height.
@property (nonatomic) double height;

/// Assigning a value of true to this property will cause the receiver to scale its entire frame whenever its width or height variables are set. The default value of this property is true.
@property (nonatomic) BOOL constrainsProportions;

/// The original width/height ratio of the receiver when it was initialized.
@property (nonatomic, readonly) double originalRatio;

/// Initializes a new C4Movie using the specified filename from the bundle (i.e. your project).
///
/// \param name The name of the movie file included in your project.
- (nullable instancetype)init:(NSString * __nonnull)filename;

/// Begins playback of the current item.
///
/// This is the same as setting rate to 1.0.
- (void)play;

/// Pauses playback.
///
/// This is the same as setting rate to 0.0.
- (void)pause;

/// Stops playback.
///
/// This is the same as setting rate to 0.0 and resetting the current time to 0.
- (void)stop;

/// Called at the end of playback (i.e. when the movie reaches its end).
///
/// You can override this function to add your own custom actions.
///
/// Default behaviour: if the movie should loop then the method calls <code>stop()
/// </code> and <code>play()
/// </code>.
- (void)reachedEnd:(void (^ __nonnull)(void))action;
@end




/// C4QuadCurve is a concrete subclass of C4Curve that modifies it shape based on a single point rather than 2 used by its parent class.
SWIFT_CLASS("_TtC2C411C4QuadCurve")
@interface C4QuadCurve : C4Curve
@end



/// C4Rectangle is a concrete subclass of C4Shape that has a special initialzer that creates a rectangle whose shape is determined by its frame.
SWIFT_CLASS("_TtC2C411C4Rectangle")
@interface C4Rectangle : C4Shape
@end



/// C4RegularPolygon is a is a concrete subclass of C4Polygon that defines a shape whose sides are uniform (e.g. pentagon, octagon, etc.).
///
/// This class defines two variables called <code>sides
/// </code> and <code>phase
/// </code> that represent the number of sides and the initial rotation of the shape (respectively). The default shape is a hexagon.
SWIFT_CLASS("_TtC2C416C4RegularPolygon")
@interface C4RegularPolygon : C4Shape

/// Returns the number of sides in the polygon.
///
/// Assigning a value to this property will change the number of sides and cause the receiver to automatically update its
/// path.
///
/// <code>let f = C4Rect(100,100,100,100)
/// var p = C4RegularPolygon(frame: f)
/// p.sides = 3
/// canvas.add(p)
/// 
/// </code>
@property (nonatomic) NSInteger sides;

/// Returns the phase (i.e. "rotated" beginning position) of the shape. This is not actual rotation, it simply changes where the beginning of the shape is.
///
/// Assigning a value to this property will change the starting position of the beginning of the shape. The shape will
/// still calculate its points based on the frame.
///
/// <code>let f = C4Rect(100,100,100,100)
/// var p = C4RegularPolygon(frame: f)
/// p.phase = M_PI_2
/// canvas.add(p)
/// 
/// </code>
@property (nonatomic) double phase;

/// Initializes a new C4RegularPolygon.
///
/// Default values are are sides = 6 (i.e. a hexagon), phase = 0 and frame = {0,0,0,0}.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Initializes a new C4RegularPolygon from data in a given unarchiver.
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@interface C4Shape (SWIFT_EXTENSION(C4))
@end



/// Extension for CAShapeLayer that allows overriding the actions for specific properties.
SWIFT_CLASS("_TtC2C412C4ShapeLayer")
@interface C4ShapeLayer : CAShapeLayer

/// A boolean value that, when true, prevents the animation of a shape's properties.
///
/// <code>C4ShapeLayer.disableActions = true
/// circle.fillColor = red
/// C4ShapeLayer.disableActions = false
/// 
/// This value can be set globally, after which changes to any shape's properties will be immediate.
/// 
/// </code>
+ (BOOL)disableActions;
+ (void)setDisableActions:(BOOL)value;

/// This method searches for the given action object of the layer. Actions define dynamic behaviors for a layer. For example, the animatable properties of a layer typically have corresponding action objects to initiate the actual animations. When that property changes, the layer looks for the action object associated with the property name and executes it. You can also associate custom action objects with your layer to implement app-specific actions.
///
/// \param key The identifier of the action.
///
/// \returns  the action object assigned to the specified key.
- (id <CAAction> __nullable)actionForKey:(NSString * __nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id __nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// C4Star is a concrete subclass of C4Polygon that defines a star shape.
SWIFT_CLASS("_TtC2C46C4Star")
@interface C4Star : C4Polygon
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// C4TextShape defines a concrete subclass of C4Shape that draws a bezier curve whose shape looks like text.
SWIFT_CLASS("_TtC2C411C4TextShape")
@interface C4TextShape : C4Shape

/// The text used to define the shape's path. Defaults to "C4".
@property (nonatomic, copy) NSString * __nonnull text;

/// The font used to define the shape's path. Defaults to AvenirNext-DemiBold, 80pt.
@property (nonatomic, strong) C4Font * __nonnull font;

/// Initializes a new C4TextShape from a specifed string and a font
///
/// <code>let f = C4Font(name:"Avenir Next", size: 120)
/// let t = C4TextShape(text:"C4", font: f)
/// t.center = canvas.center
/// canvas.add(t)
/// 
/// </code>
/// \param text The string to be rendered as a shape
///
/// \param font The font used to define the shape of the text
- (nullable instancetype)initWithText:(NSString * __nonnull)text font:(C4Font * __nonnull)font;

/// Initializes a new C4TextShape from a specifed string, using C4's default font.
///
/// <code>let t = C4TextShape(text:"C4")
/// t.center = canvas.center
/// canvas.add(t)
/// 
/// </code>
/// \param text text The string to be rendered as a shape
- (nullable instancetype)initWithText:(NSString * __nonnull)text;
@end



/// You use the C4Timer class to create timer objects or, more simply, timers. A timer waits until a certain time interval has elapsed and then fires, executing a specified block of code.
SWIFT_CLASS("_TtC2C47C4Timer")
@interface C4Timer : NSObject

/// The current number of times the timer has fired.
@property (nonatomic, readonly) NSInteger step;

/// The number of times the timer will fire.
@property (nonatomic, readonly) NSInteger count;

/// The time interval between firing.
@property (nonatomic, readonly) double interval;

/// Initializes a new timer.
///
/// <code>let t = C4Timer(0.25) {
///     print("tick")
/// }
/// 
/// </code>
/// \param interval the time between firing
///
/// \param count the total number of times the timer should fire, defaults to Int.max
///
/// \param action a block of code to execute
- (nonnull instancetype)initWithInterval:(double)interval count:(NSInteger)count action:(void (^ __nonnull)(void))action OBJC_DESIGNATED_INITIALIZER;

/// Tells the timer to fire, i.e. execute its block of code.
- (void)fire;

/// Tells the timer to attach itself to the main run loop of an application, after calling start the timer will continue firing until the timer reaches its count or is otherwise stopped.
- (void)start;

/// Pauses the execution of the timer.
- (void)pause;

/// Stops the timer and resets its step to 0.
- (void)stop;
@end



/// C4Triangle defines a concrete subclass of C4Polygon whose shape is a closed triangle.
SWIFT_CLASS("_TtC2C410C4Triangle")
@interface C4Triangle : C4Polygon

/// Returns an object initialized from data in a given unarchiver.
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface C4View (SWIFT_EXTENSION(C4))

/// Sets the arbitrary keyed-data for the specified key.
///
/// \param value The value for the key identified by <em>key</em>.
///
/// \param key The name of one of the receiver's properties.
- (void)setValue:(id __nullable)value forKey:(NSString * __nonnull)key;

/// Returns the arbitrary keyed-data specified by the given key.
///
/// \param key The name of one of the receiver's properties.
///
/// \returns  The value for the data specified by the key.
- (id __nullable)valueForKey:(NSString * __nonnull)key;
@end


@interface C4View (SWIFT_EXTENSION(C4))

/// Class level function that executes an animation using a specified block of code.
///
/// \param duration The length of time in seconds for the animation to execute.
///
/// \param animations A block of code with specified animations to execute.
+ (void)animateWithDuration:(double)duration animations:(void (^ __nonnull)(void))animations;

/// Class level function that executes an animation using a specified block of code.
///
/// \param duration The length of time in seconds for the animation to execute.
///
/// \param delay The length of time in seconds to wait before executing the specified block of code.
///
/// \param animations A block of code with specified animations to execute.
///
/// \param completion A block of code to execute when the animation completes.
+ (void)animateWithDuration:(double)duration delay:(double)delay animations:(void (^ __nonnull)(void))animations completion:(void (^ __nullable)(BOOL))completion;

/// Class level function that executes an animation using a specified block of code.
///
/// \param duration The length of time in seconds for the animation to execute.
///
/// \param delay The length of time in seconds to wait before executing the specified block of code.
///
/// \param options Options for animating views using block objects, see: UIViewAnimationOptions.
///
/// \param animations A block of code with specified animations to execute.
///
/// \param completion A block of code to execute when the animation completes.
+ (void)animateWithDuration:(double)duration delay:(double)delay options:(UIViewAnimationOptions)options animations:(void (^ __nonnull)(void))animations completion:(void (^ __nullable)(BOOL))completion;
@end


@interface C4View (SWIFT_EXTENSION(C4))
@end


@interface C4View (SWIFT_EXTENSION(C4))
@end



/// C4Wedge is a concrete subclass of C4Shape whose shape is a wedge with a rounded outer edge.
SWIFT_CLASS("_TtC2C47C4Wedge")
@interface C4Wedge : C4Shape
@end


@interface CABasicAnimation (SWIFT_EXTENSION(C4))

/// Configures basic options for a CABasicAnimation.
///
/// The options set in this method are favorable for the inner workings of C4's animation behaviours.
- (void)configureOptions;
@end


@interface CIColor (SWIFT_EXTENSION(C4))
@end


@interface NSObject (SWIFT_EXTENSION(C4))

/// Posts a new notification originating from the receiver.
///
/// <code>canvas.addTapGestureRecognizer { location, state in
///     self.canvas.post("tapped")
/// }
/// 
/// </code>
/// \param event The notification name for the event
- (void)post:(NSString * __nonnull)event;

/// An action to run on receipt of a given event.
///
/// <code>canvas.on(event: "tapped") {
///     println("received tap")
/// }
/// 
/// </code>
/// \param event The notification name to listen for
///
/// \param run A block of code to run when the receiver "hears" the specified event name
- (id __nonnull)onEvent:(NSString * __nonnull)notificationName run:(void (^ __nonnull)(void))executionBlock;

/// Register an action to run when an event is triggered by the specified sender. Returns an observer handle you can use to cancel the action.
///
/// <code>canvas.on(event: "tapped", from: anObject) {
///     print("obj was tapped")
/// }
/// 
/// </code>
/// \param notificationName The notification name to listen for
///
/// \param sender The object from which to listen for the notification
///
/// \param executionBlock A block of code to run when the receiver "hears" the specified notification name
- (id __nonnull)onEvent:(NSString * __nonnull)notificationName from:(id __nullable)sender run:(void (^ __nonnull)(void))executionBlock;

/// Cancels any actions registered to run for a specified object.
///
/// <code>canvas.cancel(self)
/// 
/// </code>
/// \param observer An object whose actions are to be removed from the notification center.
- (void)cancel:(id __nonnull)observer;
@end


@interface NSValue (SWIFT_EXTENSION(C4))
@end


@interface UIColor (SWIFT_EXTENSION(C4))
@end


@interface UIGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UILongPressGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UIPanGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UIPinchGestureRecognizer (SWIFT_EXTENSION(C4))

/// The closure to call when there is a gesture event.
@property (nonatomic, copy) void (^ __nullable pinchAction)(double, double, UIGestureRecognizerState);
@end


@interface UIRotationGestureRecognizer (SWIFT_EXTENSION(C4))

/// The closure to call when there is a gesture event.
@property (nonatomic, copy) void (^ __nullable rotationAction)(double, double, UIGestureRecognizerState);
@end


@interface UIScreenEdgePanGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UISwipeGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UITapGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UIView (SWIFT_EXTENSION(C4))
@end


@interface UIViewController (SWIFT_EXTENSION(C4))

/// Returns a C4View object representation of the controller's view property.
@property (nonatomic, readonly, strong) C4View * __nonnull canvas;
@end

#pragma clang diagnostic pop
